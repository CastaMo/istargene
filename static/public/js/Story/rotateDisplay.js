// Generated by LiveScript 1.4.0
var rotateDisplay;
rotateDisplay = (function(){
  var ref$, deepCopy, query, addListener, querys, picWidth, compatibleCSSConfig, Base, rotateDisplay;
  ref$ = [util.deepCopy, util.query, util.addListener, util.querys], deepCopy = ref$[0], query = ref$[1], addListener = ref$[2], querys = ref$[3];
  picWidth = 1023;
  compatibleCSSConfig = ["", "-webkit-", "-moz-", "-ms-", "-o-"];
  Base = (function(){
    Base.displayName = 'Base';
    var prototype = Base.prototype, constructor = Base;
    function Base(options){
      deepCopy(options, this);
      this.init();
    }
    prototype.init = function(){};
    return Base;
  }());
  rotateDisplay = (function(superclass){
    var _getCompatibleTranslateCss, _getCompatibleDurationCss, _autoRotateEvent, prototype = extend$((import$(rotateDisplay, superclass).displayName = 'rotateDisplay', rotateDisplay), superclass).prototype, constructor = rotateDisplay;
    _getCompatibleTranslateCss = function(ver, hor){
      var result_, i$, ref$, len$, config;
      result_ = {};
      for (i$ = 0, len$ = (ref$ = compatibleCSSConfig).length; i$ < len$; ++i$) {
        config = ref$[i$];
        result_[config + "transform"] = "translate3d(" + ver + ", " + hor + ", 0)";
      }
      return result_;
    };
    _getCompatibleDurationCss = function(isMove){
      var result_, i$, ref$, len$, config;
      isMove == null && (isMove = false);
      result_ = {};
      if (isMove) {
        for (i$ = 0, len$ = (ref$ = compatibleCSSConfig).length; i$ < len$; ++i$) {
          config = ref$[i$];
          result_[config + "transition"] = "all 0 linear";
        }
      } else {
        for (i$ = 0, len$ = (ref$ = compatibleCSSConfig).length; i$ < len$; ++i$) {
          config = ref$[i$];
          result_[config + "transition"] = "all 0.3s ease-in-out";
        }
      }
      return result_;
    };
    _autoRotateEvent = function(rotateDisplay){
      var self, index;
      self = rotateDisplay;
      if (!self._autoFlag) {
        self._autoFlag = true;
      } else {
        index = (self.currentChoose + 1) % self.activityNum;
        self.setCurrentChooseAndTranslate(index);
      }
      return setTimeout(function(){
        return _autoRotateEvent(self);
      }, self.delay);
    };
    function rotateDisplay(options){
      this.displayUlDom = query(options.displayCSSSelector);
      this.chooseUlDom = query(options.chooseCSSSelector);
      this.leftArrowDom = query(options.leftArrowCSSSelector);
      this.rightArrowDom = query(options.rightArrowCSSSelector);
      rotateDisplay.superclass.call(this, options);
    }
    prototype.init = function(){
      this.initDisplay();
      this.initChoose();
      return this.initAutoRotate();
    };
    prototype.initDisplay = function(){
      var i$, ref$, len$, dom;
      this.displayContainerDom = this.displayUlDom.parentNode;
      this.displayContainerDom.style.overflowX = "hidden";
      this.allDisplayDom = querys("li", this.displayUlDom);
      for (i$ = 0, len$ = (ref$ = this.allDisplayDom).length; i$ < len$; ++i$) {
        dom = ref$[i$];
        dom.style.width = picWidth + "px";
      }
      this.activityNum = this.allDisplayDom.length;
      return this.displayUlDom.style.width = picWidth * this.activityNum + "px";
    };
    prototype.initChoose = function(){
      var self, i$, ref$, len$;
      this.chooseUlDom.parentNode.style.overflow = "hidden";
      self = this;
      this.allChooseDom = querys("li", this.chooseUlDom);
      this.currentChoose = 0;
      this.allChooseDom[0].className = "active";
      for (i$ = 0, len$ = (ref$ = this.allChooseDom).length; i$ < len$; ++i$) {
        (fn$.call(this, i$, ref$[i$]));
      }
      addListener(this.leftArrowDom, "click", function(e){
        e.preventDefault();
        e.stopPropagation();
        self._autoFlag = false;
        return self.setCurrentChooseAndTranslate(self.currentChoose - 1);
      });
      return addListener(this.rightArrowDom, "click", function(e){
        e.preventDefault();
        e.stopPropagation();
        self._autoFlag = false;
        return self.setCurrentChooseAndTranslate(self.currentChoose + 1);
      });
      function fn$(i, dom){
        addListener(dom, "click", function(e){
          e.preventDefault();
          e.stopPropagation();
          self._autoFlag = false;
          return self.setCurrentChooseAndTranslate(i);
        });
      }
    };
    prototype.initAutoRotate = function(){
      var self;
      self = this;
      this._autoFlag = true;
      return setTimeout(function(){
        return _autoRotateEvent(self);
      }, self.delay);
    };
    prototype.setCurrentChoose = function(index){
      this.allChooseDom[this.currentChoose].className = "inactive";
      this.allChooseDom[index].className = "active";
      return this.currentChoose = index;
    };
    prototype.setTransitionForDisplayUlDom = function(isMove){
      var compatibleDurationCss, key, value, results$ = [];
      compatibleDurationCss = _getCompatibleDurationCss(isMove);
      for (key in compatibleDurationCss) {
        value = compatibleDurationCss[key];
        results$.push(this.displayUlDom.style[key] = value);
      }
      return results$;
    };
    prototype.translateForDisplayUlDom = function(ver, hor){
      var compatibleTranslateCss, key, value, results$ = [];
      ver == null && (ver = 0);
      hor == null && (hor = 0);
      compatibleTranslateCss = _getCompatibleTranslateCss(ver, hor);
      for (key in compatibleTranslateCss) {
        value = compatibleTranslateCss[key];
        results$.push(this.displayUlDom.style[key] = value);
      }
      return results$;
    };
    prototype.setCurrentChooseAndTranslate = function(index){
      var transIndex;
      index = (index + this.activityNum) % this.activityNum;
      transIndex = -1 * index;
      this.translateForDisplayUlDom(transIndex * picWidth + "px", 0);
      return this.setCurrentChoose(index);
    };
    return rotateDisplay;
  }(Base));
  return rotateDisplay;
}.call(this));
module.exports = rotateDisplay;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}